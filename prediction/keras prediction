{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Stock Price Prediction using Keras: BBCA.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyOH9CRLBrUno43PhUJSNBw8",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Gofanz17/porto_project/blob/main/Stock_Price_Prediction_using_Keras_BBCA.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Desc : This program uses an artificial recurrent neural network called Long Short Term Memory (LSTM)\n",
        "#       to predict the closing stock price of a corporation (Bank BCA) using the past 60 day stock price"
      ],
      "metadata": {
        "id": "nppvGfTV6iSD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install yfinance"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vw_JYMNf747a",
        "outputId": "30d604bd-869c-4879-ab21-a5653e4704c6"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: yfinance in /usr/local/lib/python3.7/dist-packages (0.1.69)\n",
            "Requirement already satisfied: numpy>=1.15 in /usr/local/lib/python3.7/dist-packages (from yfinance) (1.19.5)\n",
            "Requirement already satisfied: lxml>=4.5.1 in /usr/local/lib/python3.7/dist-packages (from yfinance) (4.7.1)\n",
            "Requirement already satisfied: multitasking>=0.0.7 in /usr/local/lib/python3.7/dist-packages (from yfinance) (0.0.10)\n",
            "Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.7/dist-packages (from yfinance) (1.3.5)\n",
            "Requirement already satisfied: requests>=2.26 in /usr/local/lib/python3.7/dist-packages (from yfinance) (2.27.1)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24->yfinance) (2018.9)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24->yfinance) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas>=0.24->yfinance) (1.15.0)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.26->yfinance) (1.24.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests>=2.26->yfinance) (2021.10.8)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.26->yfinance) (2.10)\n",
            "Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.7/dist-packages (from requests>=2.26->yfinance) (2.0.10)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pandas --upgrade"
      ],
      "metadata": {
        "id": "2O_p91eLCvWJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "65f11831-f291-4784-c9e0-67fc7fc6e594"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (1.3.5)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (2018.9)\n",
            "Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (1.19.5)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas) (1.15.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install numpy --upgrade"
      ],
      "metadata": {
        "id": "W25Ev87JDKuR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8f989159-e956-4103-8f85-d5ef3fbdb285"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (1.21.5)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "Mp51Ge6W5-JP"
      },
      "outputs": [],
      "source": [
        "import math\n",
        "from pandas_datareader import data as pdr\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Activation, Dense, Dropout, LSTM\n",
        "import matplotlib.pyplot as plt\n",
        "import yfinance as yfin\n",
        "yfin.pdr_override()\n",
        "\n",
        "plt.style.use('fivethirtyeight')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Get the stock\n",
        "df = pdr.get_data_yahoo('BBCA.JK', start='2012-01-01', end='2022-01-22')\n",
        "#Show the data\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 473
        },
        "id": "P3ds750A7Elb",
        "outputId": "54fd6553-b630-44d1-d8b4-3d9d0f071b61"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\r[*********************100%***********************]  1 of 1 completed\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-6ce9e4e7-3737-46dc-acc7-49aa7ca504a1\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2012-01-02</th>\n",
              "      <td>1600.0</td>\n",
              "      <td>1600.0</td>\n",
              "      <td>1590.0</td>\n",
              "      <td>1600.0</td>\n",
              "      <td>1402.119873</td>\n",
              "      <td>7870000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-01-03</th>\n",
              "      <td>1620.0</td>\n",
              "      <td>1620.0</td>\n",
              "      <td>1590.0</td>\n",
              "      <td>1620.0</td>\n",
              "      <td>1419.646362</td>\n",
              "      <td>27775000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-01-04</th>\n",
              "      <td>1620.0</td>\n",
              "      <td>1630.0</td>\n",
              "      <td>1600.0</td>\n",
              "      <td>1620.0</td>\n",
              "      <td>1419.646362</td>\n",
              "      <td>87245000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-01-05</th>\n",
              "      <td>1610.0</td>\n",
              "      <td>1630.0</td>\n",
              "      <td>1610.0</td>\n",
              "      <td>1610.0</td>\n",
              "      <td>1410.883057</td>\n",
              "      <td>57197500.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-01-06</th>\n",
              "      <td>1600.0</td>\n",
              "      <td>1610.0</td>\n",
              "      <td>1590.0</td>\n",
              "      <td>1600.0</td>\n",
              "      <td>1402.119873</td>\n",
              "      <td>27190000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-01-17</th>\n",
              "      <td>7900.0</td>\n",
              "      <td>7900.0</td>\n",
              "      <td>7700.0</td>\n",
              "      <td>7750.0</td>\n",
              "      <td>7750.000000</td>\n",
              "      <td>63902600.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-01-18</th>\n",
              "      <td>7775.0</td>\n",
              "      <td>7775.0</td>\n",
              "      <td>7550.0</td>\n",
              "      <td>7675.0</td>\n",
              "      <td>7675.000000</td>\n",
              "      <td>71476300.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-01-19</th>\n",
              "      <td>7650.0</td>\n",
              "      <td>7725.0</td>\n",
              "      <td>7575.0</td>\n",
              "      <td>7675.0</td>\n",
              "      <td>7675.000000</td>\n",
              "      <td>60389700.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-01-20</th>\n",
              "      <td>7725.0</td>\n",
              "      <td>7775.0</td>\n",
              "      <td>7625.0</td>\n",
              "      <td>7775.0</td>\n",
              "      <td>7775.000000</td>\n",
              "      <td>59925500.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-01-21</th>\n",
              "      <td>7775.0</td>\n",
              "      <td>7950.0</td>\n",
              "      <td>7700.0</td>\n",
              "      <td>7950.0</td>\n",
              "      <td>7950.000000</td>\n",
              "      <td>63370500.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2503 rows × 6 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6ce9e4e7-3737-46dc-acc7-49aa7ca504a1')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6ce9e4e7-3737-46dc-acc7-49aa7ca504a1 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6ce9e4e7-3737-46dc-acc7-49aa7ca504a1');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "              Open    High     Low   Close    Adj Close      Volume\n",
              "Date                                                               \n",
              "2012-01-02  1600.0  1600.0  1590.0  1600.0  1402.119873   7870000.0\n",
              "2012-01-03  1620.0  1620.0  1590.0  1620.0  1419.646362  27775000.0\n",
              "2012-01-04  1620.0  1630.0  1600.0  1620.0  1419.646362  87245000.0\n",
              "2012-01-05  1610.0  1630.0  1610.0  1610.0  1410.883057  57197500.0\n",
              "2012-01-06  1600.0  1610.0  1590.0  1600.0  1402.119873  27190000.0\n",
              "...            ...     ...     ...     ...          ...         ...\n",
              "2022-01-17  7900.0  7900.0  7700.0  7750.0  7750.000000  63902600.0\n",
              "2022-01-18  7775.0  7775.0  7550.0  7675.0  7675.000000  71476300.0\n",
              "2022-01-19  7650.0  7725.0  7575.0  7675.0  7675.000000  60389700.0\n",
              "2022-01-20  7725.0  7775.0  7625.0  7775.0  7775.000000  59925500.0\n",
              "2022-01-21  7775.0  7950.0  7700.0  7950.0  7950.000000  63370500.0\n",
              "\n",
              "[2503 rows x 6 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Dropping some unused columns\n",
        "df = df.drop(['Adj Close'], axis = 1)\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "wt_HCawldDVF",
        "outputId": "63473729-e47e-4260-db8c-17b7feb6b6e5"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-8167c366-69b0-49d3-b4ec-e621e0108373\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2012-01-02</th>\n",
              "      <td>1600.0</td>\n",
              "      <td>1600.0</td>\n",
              "      <td>1590.0</td>\n",
              "      <td>1600.0</td>\n",
              "      <td>7870000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-01-03</th>\n",
              "      <td>1620.0</td>\n",
              "      <td>1620.0</td>\n",
              "      <td>1590.0</td>\n",
              "      <td>1620.0</td>\n",
              "      <td>27775000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-01-04</th>\n",
              "      <td>1620.0</td>\n",
              "      <td>1630.0</td>\n",
              "      <td>1600.0</td>\n",
              "      <td>1620.0</td>\n",
              "      <td>87245000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-01-05</th>\n",
              "      <td>1610.0</td>\n",
              "      <td>1630.0</td>\n",
              "      <td>1610.0</td>\n",
              "      <td>1610.0</td>\n",
              "      <td>57197500.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-01-06</th>\n",
              "      <td>1600.0</td>\n",
              "      <td>1610.0</td>\n",
              "      <td>1590.0</td>\n",
              "      <td>1600.0</td>\n",
              "      <td>27190000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-01-17</th>\n",
              "      <td>7900.0</td>\n",
              "      <td>7900.0</td>\n",
              "      <td>7700.0</td>\n",
              "      <td>7750.0</td>\n",
              "      <td>63902600.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-01-18</th>\n",
              "      <td>7775.0</td>\n",
              "      <td>7775.0</td>\n",
              "      <td>7550.0</td>\n",
              "      <td>7675.0</td>\n",
              "      <td>71476300.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-01-19</th>\n",
              "      <td>7650.0</td>\n",
              "      <td>7725.0</td>\n",
              "      <td>7575.0</td>\n",
              "      <td>7675.0</td>\n",
              "      <td>60389700.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-01-20</th>\n",
              "      <td>7725.0</td>\n",
              "      <td>7775.0</td>\n",
              "      <td>7625.0</td>\n",
              "      <td>7775.0</td>\n",
              "      <td>59925500.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-01-21</th>\n",
              "      <td>7775.0</td>\n",
              "      <td>7950.0</td>\n",
              "      <td>7700.0</td>\n",
              "      <td>7950.0</td>\n",
              "      <td>63370500.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2503 rows × 5 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8167c366-69b0-49d3-b4ec-e621e0108373')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8167c366-69b0-49d3-b4ec-e621e0108373 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8167c366-69b0-49d3-b4ec-e621e0108373');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "              Open    High     Low   Close      Volume\n",
              "Date                                                  \n",
              "2012-01-02  1600.0  1600.0  1590.0  1600.0   7870000.0\n",
              "2012-01-03  1620.0  1620.0  1590.0  1620.0  27775000.0\n",
              "2012-01-04  1620.0  1630.0  1600.0  1620.0  87245000.0\n",
              "2012-01-05  1610.0  1630.0  1610.0  1610.0  57197500.0\n",
              "2012-01-06  1600.0  1610.0  1590.0  1600.0  27190000.0\n",
              "...            ...     ...     ...     ...         ...\n",
              "2022-01-17  7900.0  7900.0  7700.0  7750.0  63902600.0\n",
              "2022-01-18  7775.0  7775.0  7550.0  7675.0  71476300.0\n",
              "2022-01-19  7650.0  7725.0  7575.0  7675.0  60389700.0\n",
              "2022-01-20  7725.0  7775.0  7625.0  7775.0  59925500.0\n",
              "2022-01-21  7775.0  7950.0  7700.0  7950.0  63370500.0\n",
              "\n",
              "[2503 rows x 5 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Visualize the closing price history\n",
        "plt.figure(figsize=(16,8))\n",
        "plt.title('Close Price BBCA')\n",
        "plt.plot(df['Close'])\n",
        "plt.xlabel('Date', fontsize=18)\n",
        "plt.ylabel('Close Price Indonesia Rupiah (Rp)', fontsize=18)\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 558
        },
        "id": "3plCs_MjEHa5",
        "outputId": "44fd1946-24c6-47e4-d025-bb6f01a0a9ce"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x576 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#make some trading analysis variable\n",
        "ma100 = df.Close.rolling(100).mean()\n",
        "ma100"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ap3xW89FdjUg",
        "outputId": "bba0c1f0-4ee5-4624-f38f-22d4ea26cb38"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Date\n",
              "2012-01-02        NaN\n",
              "2012-01-03        NaN\n",
              "2012-01-04        NaN\n",
              "2012-01-05        NaN\n",
              "2012-01-06        NaN\n",
              "               ...   \n",
              "2022-01-17    7206.15\n",
              "2022-01-18    7217.80\n",
              "2022-01-19    7228.90\n",
              "2022-01-20    7241.15\n",
              "2022-01-21    7255.00\n",
              "Name: Close, Length: 2503, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#visualize the trading analysis variable\n",
        "plt.figure(figsize=(12,6))\n",
        "plt.plot(df.Close)\n",
        "plt.plot(ma100, 'r')\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 398
        },
        "id": "ceJOYpwVd1KF",
        "outputId": "b3a74f41-dc3a-4290-a1a0-869b48f61c94"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#make some other trading analysis variable\n",
        "ma200 = df.Close.rolling(200).mean()\n",
        "ma200"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mfhpR67ne_0v",
        "outputId": "04a67177-0e19-4e59-8378-5fae96b84627"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Date\n",
              "2012-01-02         NaN\n",
              "2012-01-03         NaN\n",
              "2012-01-04         NaN\n",
              "2012-01-05         NaN\n",
              "2012-01-06         NaN\n",
              "                ...   \n",
              "2022-01-17    6741.500\n",
              "2022-01-18    6748.075\n",
              "2022-01-19    6754.475\n",
              "2022-01-20    6762.275\n",
              "2022-01-21    6770.900\n",
              "Name: Close, Length: 2503, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#visualize the trading analysis variable\n",
        "plt.figure(figsize=(12,6))\n",
        "plt.plot(df.Close, label='original')\n",
        "plt.plot(ma100, 'r', label='ma100')\n",
        "plt.plot(ma200, 'g', label='ma200')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 398
        },
        "id": "8KvCYZbWfDVM",
        "outputId": "dd958a0d-76e8-4316-8a17-f6578a100d73"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "By analyzing from the graph above, the price will be moving up if the ma100 (red) cross from below to above of ma200 (green) and vice versa. In stock prediction, the last price before the stock go up is called support and the the last price before the stock go down is called resistance. "
      ],
      "metadata": {
        "id": "upNlr9WXLCkJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#get the number of rows and colums\n",
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "61GfQEQTDuSh",
        "outputId": "5267bbeb-87b0-414a-98f6-d948708bd321"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2503, 5)"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Splitting data into training and testing\n",
        "\n",
        "train_data = pd.DataFrame(df['Close'][0:int(len(df)*0.7)])\n",
        "test_data = pd.DataFrame(df['Close'][int(len(df)*0.7):int(len(df))])\n",
        "\n",
        "print(train_data.shape)\n",
        "print(test_data.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3IIME-myFDPA",
        "outputId": "545e4d80-8e64-4003-a6d3-22b75b3a05af"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1752, 1)\n",
            "(751, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "vWdwmJ1M5V7Z",
        "outputId": "6fd3ee81-9065-4ccf-d289-78b66b0fd4dc"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-63372872-55ff-4634-95bd-4b32595b6551\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Close</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2012-01-02</th>\n",
              "      <td>1600.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-01-03</th>\n",
              "      <td>1620.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-01-04</th>\n",
              "      <td>1620.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-01-05</th>\n",
              "      <td>1610.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012-01-06</th>\n",
              "      <td>1600.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-10</th>\n",
              "      <td>5255.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-11</th>\n",
              "      <td>5250.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-14</th>\n",
              "      <td>5200.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-15</th>\n",
              "      <td>5260.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-16</th>\n",
              "      <td>5285.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1752 rows × 1 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-63372872-55ff-4634-95bd-4b32595b6551')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-63372872-55ff-4634-95bd-4b32595b6551 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-63372872-55ff-4634-95bd-4b32595b6551');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "             Close\n",
              "Date              \n",
              "2012-01-02  1600.0\n",
              "2012-01-03  1620.0\n",
              "2012-01-04  1620.0\n",
              "2012-01-05  1610.0\n",
              "2012-01-06  1600.0\n",
              "...            ...\n",
              "2019-01-10  5255.0\n",
              "2019-01-11  5250.0\n",
              "2019-01-14  5200.0\n",
              "2019-01-15  5260.0\n",
              "2019-01-16  5285.0\n",
              "\n",
              "[1752 rows x 1 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "iWJzHlkH5ZHw",
        "outputId": "5e432b77-e912-4c4a-d045-9e65b16c3e9f"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-b982c5a5-b4e6-4b59-b52d-935c9a3f5ea4\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Close</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-01-17</th>\n",
              "      <td>5330.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-18</th>\n",
              "      <td>5425.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-21</th>\n",
              "      <td>5545.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-22</th>\n",
              "      <td>5600.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-23</th>\n",
              "      <td>5500.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-01-17</th>\n",
              "      <td>7750.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-01-18</th>\n",
              "      <td>7675.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-01-19</th>\n",
              "      <td>7675.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-01-20</th>\n",
              "      <td>7775.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-01-21</th>\n",
              "      <td>7950.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>751 rows × 1 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b982c5a5-b4e6-4b59-b52d-935c9a3f5ea4')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b982c5a5-b4e6-4b59-b52d-935c9a3f5ea4 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b982c5a5-b4e6-4b59-b52d-935c9a3f5ea4');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "             Close\n",
              "Date              \n",
              "2019-01-17  5330.0\n",
              "2019-01-18  5425.0\n",
              "2019-01-21  5545.0\n",
              "2019-01-22  5600.0\n",
              "2019-01-23  5500.0\n",
              "...            ...\n",
              "2022-01-17  7750.0\n",
              "2022-01-18  7675.0\n",
              "2022-01-19  7675.0\n",
              "2022-01-20  7775.0\n",
              "2022-01-21  7950.0\n",
              "\n",
              "[751 rows x 1 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Scale the data\n",
        "scaler = MinMaxScaler(feature_range=(0,1))\n",
        "scaled_data = scaler.fit_transform(train_data)\n",
        "\n",
        "scaled_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "INido4hlFrwY",
        "outputId": "e82190b5-53f4-4c21-d7c2-04f647ac2c3e"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.05633803],\n",
              "       [0.06145967],\n",
              "       [0.06145967],\n",
              "       ...,\n",
              "       [0.97823303],\n",
              "       [0.99359795],\n",
              "       [1.        ]])"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "scaled_data.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MhrXOQ_Z8Lah",
        "outputId": "9b7bb309-913a-4882-fc5c-f8d89b6c3b4e"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1752, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Split data into x_train and y_train dataset\n",
        "x_train = []\n",
        "y_train = []\n",
        "\n",
        "for i in range (100, scaled_data.shape[0]):\n",
        "  x_train.append(scaled_data[i-100:i])\n",
        "  y_train.append(scaled_data[i, 0])\n",
        "\n",
        "#Convert the x_train and y_train to numpy arrays\n",
        "x_train, y_train = np.array(x_train), np.array(y_train)"
      ],
      "metadata": {
        "id": "WpLvM9sJGGyI"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RoGjMn1YF7Qk",
        "outputId": "9f27a530-e6f3-4486-f7fe-f628b139593e"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1652, 100, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Build LSTM model with 4 layers\n",
        "model = Sequential()\n",
        "model.add(LSTM(units = 50, activation = 'relu', return_sequences = True, input_shape =(x_train.shape[1], 1)))\n",
        "model.add(Dropout(0.2))\n",
        "\n",
        "model.add(LSTM(units = 60, activation = 'relu', return_sequences = True))\n",
        "model.add(Dropout(0.3))\n",
        "\n",
        "model.add(LSTM(units = 80, activation = 'relu', return_sequences = True))\n",
        "model.add(Dropout(0.4))\n",
        "\n",
        "model.add(LSTM(units = 120, activation = 'relu'))\n",
        "model.add(Dropout(0.5))\n",
        "\n",
        "model.add(Dense(units = 1)) #because we have to predict one value / closing price"
      ],
      "metadata": {
        "id": "-oumtNs8IY5o"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#summary of model\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6cIYuON6Lr19",
        "outputId": "49d601f7-dce2-4a77-efc6-d2b85e321918"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " lstm (LSTM)                 (None, 100, 50)           10400     \n",
            "                                                                 \n",
            " dropout (Dropout)           (None, 100, 50)           0         \n",
            "                                                                 \n",
            " lstm_1 (LSTM)               (None, 100, 60)           26640     \n",
            "                                                                 \n",
            " dropout_1 (Dropout)         (None, 100, 60)           0         \n",
            "                                                                 \n",
            " lstm_2 (LSTM)               (None, 100, 80)           45120     \n",
            "                                                                 \n",
            " dropout_2 (Dropout)         (None, 100, 80)           0         \n",
            "                                                                 \n",
            " lstm_3 (LSTM)               (None, 120)               96480     \n",
            "                                                                 \n",
            " dropout_3 (Dropout)         (None, 120)               0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 1)                 121       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 178,761\n",
            "Trainable params: 178,761\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Compiling\n",
        "model.compile(optimizer='adam', loss = 'mean_squared_error')\n",
        "model.fit(x_train, y_train, epochs = 50)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eAEiRaAJL0Uo",
        "outputId": "93dd1685-9c34-43e5-c24f-31c9d9e6146e"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "52/52 [==============================] - 15s 206ms/step - loss: 0.0584\n",
            "Epoch 2/50\n",
            "52/52 [==============================] - 11s 206ms/step - loss: 0.0074\n",
            "Epoch 3/50\n",
            "52/52 [==============================] - 11s 213ms/step - loss: 0.0064\n",
            "Epoch 4/50\n",
            "52/52 [==============================] - 11s 209ms/step - loss: 0.0070\n",
            "Epoch 5/50\n",
            "52/52 [==============================] - 11s 204ms/step - loss: 0.0066\n",
            "Epoch 6/50\n",
            "52/52 [==============================] - 11s 205ms/step - loss: 0.0057\n",
            "Epoch 7/50\n",
            "52/52 [==============================] - 11s 203ms/step - loss: 0.0057\n",
            "Epoch 8/50\n",
            "52/52 [==============================] - 11s 206ms/step - loss: 0.0054\n",
            "Epoch 9/50\n",
            "52/52 [==============================] - 11s 207ms/step - loss: 0.0049\n",
            "Epoch 10/50\n",
            "52/52 [==============================] - 11s 207ms/step - loss: 0.0050\n",
            "Epoch 11/50\n",
            "52/52 [==============================] - 11s 203ms/step - loss: 0.0051\n",
            "Epoch 12/50\n",
            "52/52 [==============================] - 10s 202ms/step - loss: 0.0050\n",
            "Epoch 13/50\n",
            "52/52 [==============================] - 11s 206ms/step - loss: 0.0051\n",
            "Epoch 14/50\n",
            "52/52 [==============================] - 11s 203ms/step - loss: 0.0045\n",
            "Epoch 15/50\n",
            "52/52 [==============================] - 11s 208ms/step - loss: 0.0044\n",
            "Epoch 16/50\n",
            "52/52 [==============================] - 11s 204ms/step - loss: 0.0043\n",
            "Epoch 17/50\n",
            "52/52 [==============================] - 11s 204ms/step - loss: 0.0045\n",
            "Epoch 18/50\n",
            "52/52 [==============================] - 11s 205ms/step - loss: 0.0039\n",
            "Epoch 19/50\n",
            "52/52 [==============================] - 11s 202ms/step - loss: 0.0041\n",
            "Epoch 20/50\n",
            "52/52 [==============================] - 11s 206ms/step - loss: 0.0037\n",
            "Epoch 21/50\n",
            "52/52 [==============================] - 11s 204ms/step - loss: 0.0034\n",
            "Epoch 22/50\n",
            "52/52 [==============================] - 11s 202ms/step - loss: 0.0036\n",
            "Epoch 23/50\n",
            "52/52 [==============================] - 11s 204ms/step - loss: 0.0036\n",
            "Epoch 24/50\n",
            "52/52 [==============================] - 11s 205ms/step - loss: 0.0032\n",
            "Epoch 25/50\n",
            "52/52 [==============================] - 11s 208ms/step - loss: 0.0035\n",
            "Epoch 26/50\n",
            "52/52 [==============================] - 11s 207ms/step - loss: 0.0031\n",
            "Epoch 27/50\n",
            "52/52 [==============================] - 11s 206ms/step - loss: 0.0032\n",
            "Epoch 28/50\n",
            "52/52 [==============================] - 11s 205ms/step - loss: 0.0031\n",
            "Epoch 29/50\n",
            "52/52 [==============================] - 11s 206ms/step - loss: 0.0031\n",
            "Epoch 30/50\n",
            "52/52 [==============================] - 11s 206ms/step - loss: 0.0031\n",
            "Epoch 31/50\n",
            "52/52 [==============================] - 11s 205ms/step - loss: 0.0029\n",
            "Epoch 32/50\n",
            "52/52 [==============================] - 11s 210ms/step - loss: 0.0034\n",
            "Epoch 33/50\n",
            "52/52 [==============================] - 11s 207ms/step - loss: 0.0027\n",
            "Epoch 34/50\n",
            "52/52 [==============================] - 11s 204ms/step - loss: 0.0034\n",
            "Epoch 35/50\n",
            "52/52 [==============================] - 11s 209ms/step - loss: 0.0031\n",
            "Epoch 36/50\n",
            "52/52 [==============================] - 11s 208ms/step - loss: 0.0028\n",
            "Epoch 37/50\n",
            "52/52 [==============================] - 11s 209ms/step - loss: 0.0027\n",
            "Epoch 38/50\n",
            "52/52 [==============================] - 11s 220ms/step - loss: 0.0027\n",
            "Epoch 39/50\n",
            "52/52 [==============================] - 11s 212ms/step - loss: 0.0028\n",
            "Epoch 40/50\n",
            "52/52 [==============================] - 11s 207ms/step - loss: 0.0027\n",
            "Epoch 41/50\n",
            "52/52 [==============================] - 11s 205ms/step - loss: 0.0024\n",
            "Epoch 42/50\n",
            "52/52 [==============================] - 11s 206ms/step - loss: 0.0026\n",
            "Epoch 43/50\n",
            "52/52 [==============================] - 11s 207ms/step - loss: 0.0022\n",
            "Epoch 44/50\n",
            "52/52 [==============================] - 11s 207ms/step - loss: 0.0023\n",
            "Epoch 45/50\n",
            "52/52 [==============================] - 11s 206ms/step - loss: 0.0023\n",
            "Epoch 46/50\n",
            "52/52 [==============================] - 11s 203ms/step - loss: 0.0026\n",
            "Epoch 47/50\n",
            "52/52 [==============================] - 11s 203ms/step - loss: 0.0025\n",
            "Epoch 48/50\n",
            "52/52 [==============================] - 11s 203ms/step - loss: 0.0025\n",
            "Epoch 49/50\n",
            "52/52 [==============================] - 11s 205ms/step - loss: 0.0024\n",
            "Epoch 50/50\n",
            "52/52 [==============================] - 11s 203ms/step - loss: 0.0025\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7fb07ba25e50>"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "tRYvS8ayO6SQ",
        "outputId": "16a0cba3-e716-4a36-888a-b2af2a41f078"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-a2ba5d3e-08e9-458c-9a34-c734536fd61e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Close</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-01-17</th>\n",
              "      <td>5330.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-18</th>\n",
              "      <td>5425.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-21</th>\n",
              "      <td>5545.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-22</th>\n",
              "      <td>5600.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-23</th>\n",
              "      <td>5500.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a2ba5d3e-08e9-458c-9a34-c734536fd61e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a2ba5d3e-08e9-458c-9a34-c734536fd61e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a2ba5d3e-08e9-458c-9a34-c734536fd61e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "             Close\n",
              "Date              \n",
              "2019-01-17  5330.0\n",
              "2019-01-18  5425.0\n",
              "2019-01-21  5545.0\n",
              "2019-01-22  5600.0\n",
              "2019-01-23  5500.0"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_data.tail(100)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "KLtMii-iPBdn",
        "outputId": "c1b11e50-f4c1-499c-f409-4b38a153a10a"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-034c8466-30ea-4324-9306-748387187416\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Close</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2018-08-30</th>\n",
              "      <td>5015.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-08-31</th>\n",
              "      <td>4960.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-09-03</th>\n",
              "      <td>4955.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-09-04</th>\n",
              "      <td>4950.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-09-05</th>\n",
              "      <td>4800.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-10</th>\n",
              "      <td>5255.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-11</th>\n",
              "      <td>5250.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-14</th>\n",
              "      <td>5200.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-15</th>\n",
              "      <td>5260.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-01-16</th>\n",
              "      <td>5285.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100 rows × 1 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-034c8466-30ea-4324-9306-748387187416')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-034c8466-30ea-4324-9306-748387187416 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-034c8466-30ea-4324-9306-748387187416');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "             Close\n",
              "Date              \n",
              "2018-08-30  5015.0\n",
              "2018-08-31  4960.0\n",
              "2018-09-03  4955.0\n",
              "2018-09-04  4950.0\n",
              "2018-09-05  4800.0\n",
              "...            ...\n",
              "2019-01-10  5255.0\n",
              "2019-01-11  5250.0\n",
              "2019-01-14  5200.0\n",
              "2019-01-15  5260.0\n",
              "2019-01-16  5285.0\n",
              "\n",
              "[100 rows x 1 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#insert 100 days closing price data into variable\n",
        "past_100_days = train_data.tail(100)"
      ],
      "metadata": {
        "id": "I9wTaktNPHYx"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#drop the index\n",
        "final_df = past_100_days.append(test_data, ignore_index=True)"
      ],
      "metadata": {
        "id": "xtxfOufPPU3n"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "final_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "vxm9bHJCPiP-",
        "outputId": "b4043f15-81b5-437e-d939-b78e43976674"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-bd160d44-b8bb-46bf-9caa-171603bced68\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Close</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5015.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4960.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4955.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4950.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4800.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bd160d44-b8bb-46bf-9caa-171603bced68')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-bd160d44-b8bb-46bf-9caa-171603bced68 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-bd160d44-b8bb-46bf-9caa-171603bced68');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "    Close\n",
              "0  5015.0\n",
              "1  4960.0\n",
              "2  4955.0\n",
              "3  4950.0\n",
              "4  4800.0"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#lets scale the data\n",
        "input_data = scaler.fit_transform(final_df)"
      ],
      "metadata": {
        "id": "S88tKF8pPl3A"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "input_data.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ngNYTfImPtRm",
        "outputId": "d12b488e-15af-419e-f730-293dd649e128"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(851, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_test = []\n",
        "y_test = []\n",
        "\n",
        "for i in range(100, input_data.shape[0]):\n",
        "  x_test.append(input_data[i-100:i])\n",
        "  y_test.append(input_data[i, 0])"
      ],
      "metadata": {
        "id": "7-J96WL3Pwem"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_test, y_test = np.array(x_test), np.array(y_test)\n",
        "print(x_test.shape)\n",
        "print(y_test.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EUMWJ7jaQDJ2",
        "outputId": "7dfbaaa3-1282-4f02-8663-3d98169e4356"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(751, 100, 1)\n",
            "(751,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#making prediction\n",
        "y_predicted = model.predict(x_test)"
      ],
      "metadata": {
        "id": "nl8bOjZjQOmN"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_predicted.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pZFqB8nHQajG",
        "outputId": "40401bde-cf83-453b-a53e-f33917177fe2"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(751, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iFpEYMAEQd1v",
        "outputId": "258bb746-db70-4b26-e7f8-dd99edc0d731"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.25568182, 0.28267045, 0.31676136, 0.33238636, 0.30397727,\n",
              "       0.29261364, 0.30397727, 0.30255682, 0.31534091, 0.30965909,\n",
              "       0.34232955, 0.34232955, 0.30397727, 0.30397727, 0.31392045,\n",
              "       0.3125    , 0.30965909, 0.30255682, 0.29261364, 0.28125   ,\n",
              "       0.26988636, 0.26420455, 0.29829545, 0.26988636, 0.30397727,\n",
              "       0.30539773, 0.30113636, 0.30113636, 0.31960227, 0.32244318,\n",
              "       0.30823864, 0.31534091, 0.31392045, 0.30255682, 0.30113636,\n",
              "       0.30113636, 0.28693182, 0.30539773, 0.30397727, 0.30397727,\n",
              "       0.29829545, 0.31534091, 0.31818182, 0.30113636, 0.29545455,\n",
              "       0.296875  , 0.29971591, 0.29119318, 0.29545455, 0.29971591,\n",
              "       0.29545455, 0.30681818, 0.30397727, 0.30397727, 0.30397727,\n",
              "       0.31534091, 0.3125    , 0.29829545, 0.31392045, 0.31107955,\n",
              "       0.29829545, 0.30397727, 0.30539773, 0.30255682, 0.30255682,\n",
              "       0.33948864, 0.33948864, 0.33948864, 0.34090909, 0.34090909,\n",
              "       0.33096591, 0.33806818, 0.35653409, 0.375     , 0.375     ,\n",
              "       0.35653409, 0.35369318, 0.33806818, 0.34943182, 0.36079545,\n",
              "       0.34090909, 0.33522727, 0.33522727, 0.30255682, 0.29261364,\n",
              "       0.24147727, 0.21306818, 0.26988636, 0.29261364, 0.29261364,\n",
              "       0.33380682, 0.33522727, 0.35653409, 0.37073864, 0.37215909,\n",
              "       0.37215909, 0.39488636, 0.39488636, 0.39488636, 0.39488636,\n",
              "       0.39488636, 0.39488636, 0.41193182, 0.42045455, 0.40198864,\n",
              "       0.390625  , 0.38920455, 0.38778409, 0.41761364, 0.42897727,\n",
              "       0.42045455, 0.41193182, 0.41051136, 0.42045455, 0.40767045,\n",
              "       0.42755682, 0.44460227, 0.44318182, 0.44602273, 0.44602273,\n",
              "       0.44318182, 0.4375    , 0.41193182, 0.44602273, 0.44602273,\n",
              "       0.453125  , 0.44886364, 0.47585227, 0.47017045, 0.48863636,\n",
              "       0.48721591, 0.50284091, 0.52840909, 0.51278409, 0.51704545,\n",
              "       0.51704545, 0.50142045, 0.5       , 0.50852273, 0.5       ,\n",
              "       0.50568182, 0.49289773, 0.44602273, 0.41193182, 0.44886364,\n",
              "       0.44744318, 0.46448864, 0.45738636, 0.45028409, 0.44886364,\n",
              "       0.44602273, 0.43465909, 0.45028409, 0.44176136, 0.43892045,\n",
              "       0.44602273, 0.44460227, 0.44318182, 0.44744318, 0.44460227,\n",
              "       0.44744318, 0.47443182, 0.44602273, 0.46164773, 0.45170455,\n",
              "       0.45738636, 0.453125  , 0.45596591, 0.46164773, 0.47443182,\n",
              "       0.45170455, 0.45454545, 0.44744318, 0.45454545, 0.45738636,\n",
              "       0.45454545, 0.44318182, 0.453125  , 0.43039773, 0.42755682,\n",
              "       0.46306818, 0.46590909, 0.46590909, 0.45738636, 0.46022727,\n",
              "       0.45738636, 0.45880682, 0.46590909, 0.47443182, 0.46590909,\n",
              "       0.47727273, 0.48153409, 0.50284091, 0.49573864, 0.50710227,\n",
              "       0.47869318, 0.49147727, 0.50852273, 0.53125   , 0.52414773,\n",
              "       0.53125   , 0.50284091, 0.50426136, 0.50852273, 0.52130682,\n",
              "       0.52840909, 0.53835227, 0.52414773, 0.54829545, 0.52982955,\n",
              "       0.52698864, 0.52556818, 0.52982955, 0.52130682, 0.52556818,\n",
              "       0.52272727, 0.52414773, 0.52556818, 0.53551136, 0.54545455,\n",
              "       0.53125   , 0.53267045, 0.52414773, 0.52698864, 0.53125   ,\n",
              "       0.51704545, 0.52556818, 0.56676136, 0.55255682, 0.54971591,\n",
              "       0.54261364, 0.55823864, 0.55823864, 0.54971591, 0.55397727,\n",
              "       0.54261364, 0.54829545, 0.54829545, 0.58806818, 0.66051136,\n",
              "       0.61647727, 0.63352273, 0.63352273, 0.63920455, 0.64346591,\n",
              "       0.640625  , 0.64204545, 0.67329545, 0.65482955, 0.65625   ,\n",
              "       0.63920455, 0.65625   , 0.65198864, 0.65767045, 0.69318182,\n",
              "       0.68323864, 0.6875    , 0.69460227, 0.68323864, 0.68181818,\n",
              "       0.68465909, 0.68465909, 0.67613636, 0.68465909, 0.67045455,\n",
              "       0.66903409, 0.65625   , 0.58238636, 0.57102273, 0.61647727,\n",
              "       0.65340909, 0.65625   , 0.66193182, 0.66903409, 0.66761364,\n",
              "       0.67329545, 0.67045455, 0.63920455, 0.65056818, 0.64346591,\n",
              "       0.64346591, 0.61505682, 0.62073864, 0.59517045, 0.59659091,\n",
              "       0.56534091, 0.52840909, 0.52840909, 0.46875   , 0.53693182,\n",
              "       0.57102273, 0.56960227, 0.50284091, 0.38494318, 0.42471591,\n",
              "       0.40340909, 0.32102273, 0.32102273, 0.32102273, 0.19602273,\n",
              "       0.16193182, 0.0625    , 0.08664773, 0.        , 0.01988636,\n",
              "       0.24147727, 0.30681818, 0.30255682, 0.31107955, 0.29829545,\n",
              "       0.27840909, 0.30255682, 0.37073864, 0.34801136, 0.34232955,\n",
              "       0.33096591, 0.30397727, 0.30823864, 0.29971591, 0.23011364,\n",
              "       0.28267045, 0.26278409, 0.20738636, 0.203125  , 0.19602273,\n",
              "       0.13920455, 0.15056818, 0.11363636, 0.11931818, 0.21022727,\n",
              "       0.22443182, 0.24289773, 0.26278409, 0.23153409, 0.24573864,\n",
              "       0.22443182, 0.19318182, 0.13920455, 0.10085227, 0.09517045,\n",
              "       0.07102273, 0.09517045, 0.15340909, 0.15198864, 0.24573864,\n",
              "       0.21590909, 0.26420455, 0.38352273, 0.38636364, 0.36789773,\n",
              "       0.41761364, 0.390625  , 0.38920455, 0.35511364, 0.35227273,\n",
              "       0.30397727, 0.37784091, 0.36647727, 0.328125  , 0.32528409,\n",
              "       0.31534091, 0.33806818, 0.36221591, 0.36789773, 0.34517045,\n",
              "       0.35369318, 0.359375  , 0.38920455, 0.40909091, 0.40909091,\n",
              "       0.42755682, 0.44318182, 0.50284091, 0.47443182, 0.50284091,\n",
              "       0.49573864, 0.50284091, 0.48863636, 0.49715909, 0.48011364,\n",
              "       0.48579545, 0.50284091, 0.49715909, 0.50284091, 0.47443182,\n",
              "       0.47443182, 0.49857955, 0.484375  , 0.51420455, 0.48295455,\n",
              "       0.50568182, 0.50426136, 0.51988636, 0.49715909, 0.48011364,\n",
              "       0.49573864, 0.51988636, 0.53125   , 0.56107955, 0.54829545,\n",
              "       0.53977273, 0.53551136, 0.54971591, 0.54261364, 0.61647727,\n",
              "       0.58664773, 0.52414773, 0.59375   , 0.56960227, 0.58806818,\n",
              "       0.55397727, 0.52698864, 0.54119318, 0.515625  , 0.39204545,\n",
              "       0.41903409, 0.46022727, 0.40625   , 0.375     , 0.37642045,\n",
              "       0.34090909, 0.33380682, 0.28977273, 0.30539773, 0.28835227,\n",
              "       0.33522727, 0.30823864, 0.30539773, 0.28125   , 0.32386364,\n",
              "       0.30539773, 0.30965909, 0.36079545, 0.37642045, 0.38352273,\n",
              "       0.38210227, 0.40482955, 0.40482955, 0.41761364, 0.38494318,\n",
              "       0.37784091, 0.41761364, 0.390625  , 0.38352273, 0.38920455,\n",
              "       0.38068182, 0.39346591, 0.38636364, 0.39488636, 0.41477273,\n",
              "       0.39488636, 0.48863636, 0.53125   , 0.52698864, 0.58238636,\n",
              "       0.59943182, 0.56534091, 0.55681818, 0.58238636, 0.60227273,\n",
              "       0.60795455, 0.62073864, 0.61647727, 0.61647727, 0.60653409,\n",
              "       0.5625    , 0.58238636, 0.55539773, 0.50426136, 0.55823864,\n",
              "       0.57386364, 0.57670455, 0.55681818, 0.59375   , 0.58522727,\n",
              "              nan, 0.609375  , 0.65482955, 0.67897727, 0.67045455,\n",
              "       0.71590909, 0.71164773, 0.67329545, 0.68181818, 0.64914773,\n",
              "       0.65198864, 0.66761364, 0.66335227, 0.66477273, 0.68323864,\n",
              "       0.75568182, 0.71448864, 0.72017045, 0.74431818, 0.828125  ,\n",
              "       0.77556818, 0.76420455, 0.73579545, 0.71732955, 0.76420455,\n",
              "       0.75710227, 0.75710227, 0.75142045, 0.75284091, 0.74005682,\n",
              "       0.67897727, 0.67045455, 0.70170455, 0.66193182, 0.67897727,\n",
              "       0.67329545, 0.68039773, 0.68892045, 0.70596591, 0.70738636,\n",
              "       0.72443182, 0.70738636, 0.69602273, 0.67329545, 0.71306818,\n",
              "       0.70170455, 0.65482955, 0.68039773, 0.67045455, 0.68039773,\n",
              "       0.65198864, 0.64630682, 0.64772727, 0.74289773, 0.734375  ,\n",
              "       0.73011364, 0.65056818, 0.67329545, 0.65056818, 0.61789773,\n",
              "       0.64630682, 0.66335227, 0.63494318, 0.62357955, 0.61931818,\n",
              "       0.64630682, 0.66193182, 0.62215909, 0.60653409, 0.57102273,\n",
              "       0.55113636, 0.56392045, 0.54829545, 0.55823864, 0.50710227,\n",
              "       0.50994318, 0.49005682, 0.49289773, 0.51704545, 0.484375  ,\n",
              "       0.50284091, 0.46448864, 0.44602273, 0.53267045, 0.52556818,\n",
              "       0.52414773, 0.52272727, 0.51278409, 0.49289773, 0.50710227,\n",
              "       0.55681818, 0.52698864, 0.56107955, 0.53693182, 0.5625    ,\n",
              "       0.56107955, 0.55681818, 0.55965909, 0.56676136, 0.56676136,\n",
              "       0.55965909, 0.56534091, 0.58238636, 0.58806818, 0.55681818,\n",
              "       0.54403409, 0.55397727, 0.54829545, 0.53835227, 0.546875  ,\n",
              "       0.52272727, 0.54261364, 0.55255682, 0.578125  , 0.61647727,\n",
              "       0.61079545, 0.59659091, 0.56818182, 0.59659091, 0.62215909,\n",
              "       0.57954545, 0.5625    , 0.57954545, 0.55539773, 0.53977273,\n",
              "       0.53835227, 0.51704545, 0.54261364, 0.51136364, 0.50568182,\n",
              "       0.5       , 0.46164773, 0.45880682, 0.453125  , 0.453125  ,\n",
              "       0.47443182, 0.47727273, 0.46164773, 0.46448864, 0.45028409,\n",
              "       0.45170455, 0.49431818, 0.45880682, 0.44318182, 0.47869318,\n",
              "       0.47727273, 0.44744318, 0.44886364, 0.49005682, 0.45596591,\n",
              "       0.44744318, 0.44744318, 0.44034091, 0.45738636, 0.4375    ,\n",
              "       0.43465909, 0.48721591, 0.48011364, 0.53125   , 0.49147727,\n",
              "       0.50284091, 0.53125   , 0.53125   , 0.5625    , 0.56534091,\n",
              "       0.61647727, 0.61647727, 0.61647727, 0.61363636, 0.61647727,\n",
              "       0.61647727, 0.60511364, 0.59090909, 0.60653409, 0.60227273,\n",
              "       0.60653409, 0.59943182, 0.61647727, 0.609375  , 0.60795455,\n",
              "       0.57102273, 0.60795455, 0.59375   , 0.60369318, 0.60085227,\n",
              "       0.58664773, 0.58806818, 0.59375   , 0.61221591, 0.58522727,\n",
              "       0.60369318, 0.61079545, 0.61221591, 0.61079545, 0.59375   ,\n",
              "       0.61079545, 0.73011364, 0.66193182, 0.71875   , 0.71448864,\n",
              "       0.78125   , 0.77556818, 0.8125    , 0.80255682, 0.82102273,\n",
              "       0.87926136, 0.94318182, 0.91477273, 0.87926136, 0.87215909,\n",
              "       0.84375   , 0.87926136, 0.87926136, 0.87926136, 0.85795455,\n",
              "       0.83664773, 0.86505682, 0.84375   , 0.81534091, 0.82954545,\n",
              "       0.83664773, 0.85795455, 0.89346591, 0.921875  , 0.91477273,\n",
              "       0.921875  , 0.87926136, 0.87215909, 0.86505682, 0.89346591,\n",
              "       0.84375   , 0.85085227, 0.86505682, 0.86505682, 0.86505682,\n",
              "       0.85085227, 0.80823864, 0.84375   , 0.80823864, 0.81534091,\n",
              "       0.87215909, 0.83664773, 0.82954545, 0.82954545, 0.85085227,\n",
              "       0.82954545, 0.83664773, 0.81534091, 0.81534091, 0.81534091,\n",
              "       0.80823864, 0.87215909, 0.83664773, 0.83664773, 0.82244318,\n",
              "       0.81534091, 0.81534091, 0.82954545, 0.82954545, 0.81534091,\n",
              "       0.81534091, 0.82244318, 0.84375   , 0.85795455, 0.86505682,\n",
              "       0.91477273, 0.90056818, 0.92897727, 0.92897727, 0.92897727,\n",
              "       0.97159091, 0.94318182, 0.921875  , 0.921875  , 0.95028409,\n",
              "       1.        ])"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_predicted"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t0xHz5TjQiZW",
        "outputId": "b16c7b0e-ddfd-435b-b3bd-f2c4060bf27b"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.25274655],\n",
              "       [0.25376883],\n",
              "       [0.25500333],\n",
              "       [0.256704  ],\n",
              "       [0.25902855],\n",
              "       [0.26190147],\n",
              "       [0.26522827],\n",
              "       [0.26892504],\n",
              "       [0.27287185],\n",
              "       [0.27715728],\n",
              "       [0.2817568 ],\n",
              "       [0.28646845],\n",
              "       [0.2910157 ],\n",
              "       [0.2953465 ],\n",
              "       [0.29935437],\n",
              "       [0.30287337],\n",
              "       [0.30586132],\n",
              "       [0.30831125],\n",
              "       [0.3101977 ],\n",
              "       [0.31154603],\n",
              "       [0.31238467],\n",
              "       [0.31272158],\n",
              "       [0.31255904],\n",
              "       [0.31200236],\n",
              "       [0.31115744],\n",
              "       [0.310168  ],\n",
              "       [0.30915546],\n",
              "       [0.3082223 ],\n",
              "       [0.30745792],\n",
              "       [0.30697015],\n",
              "       [0.30682746],\n",
              "       [0.30699295],\n",
              "       [0.3074193 ],\n",
              "       [0.3080427 ],\n",
              "       [0.30876365],\n",
              "       [0.30950043],\n",
              "       [0.31017277],\n",
              "       [0.3107043 ],\n",
              "       [0.31107786],\n",
              "       [0.3113039 ],\n",
              "       [0.31140822],\n",
              "       [0.31140825],\n",
              "       [0.31135476],\n",
              "       [0.31130904],\n",
              "       [0.31128347],\n",
              "       [0.31126046],\n",
              "       [0.31121978],\n",
              "       [0.31114885],\n",
              "       [0.311022  ],\n",
              "       [0.3108317 ],\n",
              "       [0.31059232],\n",
              "       [0.31031945],\n",
              "       [0.31005317],\n",
              "       [0.3098235 ],\n",
              "       [0.3096515 ],\n",
              "       [0.30954757],\n",
              "       [0.3095319 ],\n",
              "       [0.30961567],\n",
              "       [0.30977482],\n",
              "       [0.3099956 ],\n",
              "       [0.31026876],\n",
              "       [0.31054893],\n",
              "       [0.31080502],\n",
              "       [0.3110205 ],\n",
              "       [0.31118405],\n",
              "       [0.31129092],\n",
              "       [0.31142333],\n",
              "       [0.3116839 ],\n",
              "       [0.31213498],\n",
              "       [0.31279075],\n",
              "       [0.3136642 ],\n",
              "       [0.31469202],\n",
              "       [0.31580314],\n",
              "       [0.3170196 ],\n",
              "       [0.3184762 ],\n",
              "       [0.32035828],\n",
              "       [0.32267705],\n",
              "       [0.3253026 ],\n",
              "       [0.32800663],\n",
              "       [0.33050716],\n",
              "       [0.3327076 ],\n",
              "       [0.33448195],\n",
              "       [0.33569002],\n",
              "       [0.33626872],\n",
              "       [0.3361327 ],\n",
              "       [0.33524185],\n",
              "       [0.33356616],\n",
              "       [0.3310464 ],\n",
              "       [0.32791817],\n",
              "       [0.32438612],\n",
              "       [0.32069305],\n",
              "       [0.31726524],\n",
              "       [0.31437653],\n",
              "       [0.312251  ],\n",
              "       [0.3110156 ],\n",
              "       [0.31074002],\n",
              "       [0.31152666],\n",
              "       [0.31351346],\n",
              "       [0.31693515],\n",
              "       [0.321775  ],\n",
              "       [0.3280019 ],\n",
              "       [0.33539832],\n",
              "       [0.34323466],\n",
              "       [0.3510445 ],\n",
              "       [0.3584994 ],\n",
              "       [0.36538583],\n",
              "       [0.3715536 ],\n",
              "       [0.37691534],\n",
              "       [0.38143742],\n",
              "       [0.38519293],\n",
              "       [0.38832417],\n",
              "       [0.39096788],\n",
              "       [0.3932211 ],\n",
              "       [0.395149  ],\n",
              "       [0.39681855],\n",
              "       [0.39825836],\n",
              "       [0.39952517],\n",
              "       [0.4007185 ],\n",
              "       [0.40193143],\n",
              "       [0.40324122],\n",
              "       [0.40469593],\n",
              "       [0.40630037],\n",
              "       [0.40801   ],\n",
              "       [0.4096865 ],\n",
              "       [0.41127807],\n",
              "       [0.4127754 ],\n",
              "       [0.4142083 ],\n",
              "       [0.41560078],\n",
              "       [0.41704977],\n",
              "       [0.41863397],\n",
              "       [0.42047143],\n",
              "       [0.42264998],\n",
              "       [0.4252612 ],\n",
              "       [0.42845356],\n",
              "       [0.43226555],\n",
              "       [0.43666378],\n",
              "       [0.4415408 ],\n",
              "       [0.44667402],\n",
              "       [0.45180833],\n",
              "       [0.4567467 ],\n",
              "       [0.46131024],\n",
              "       [0.46539065],\n",
              "       [0.46888298],\n",
              "       [0.47153118],\n",
              "       [0.47299165],\n",
              "       [0.47319356],\n",
              "       [0.472215  ],\n",
              "       [0.47028086],\n",
              "       [0.46764648],\n",
              "       [0.46454626],\n",
              "       [0.4611808 ],\n",
              "       [0.4577089 ],\n",
              "       [0.45422307],\n",
              "       [0.45082915],\n",
              "       [0.44759864],\n",
              "       [0.44457087],\n",
              "       [0.44178668],\n",
              "       [0.43927392],\n",
              "       [0.43704337],\n",
              "       [0.43510598],\n",
              "       [0.43345624],\n",
              "       [0.43208587],\n",
              "       [0.43106318],\n",
              "       [0.430372  ],\n",
              "       [0.43000478],\n",
              "       [0.42991406],\n",
              "       [0.43005413],\n",
              "       [0.43036515],\n",
              "       [0.43079472],\n",
              "       [0.43131578],\n",
              "       [0.43195537],\n",
              "       [0.43267003],\n",
              "       [0.43340397],\n",
              "       [0.43408042],\n",
              "       [0.43465602],\n",
              "       [0.43512052],\n",
              "       [0.43547267],\n",
              "       [0.435683  ],\n",
              "       [0.4357549 ],\n",
              "       [0.43563867],\n",
              "       [0.43528026],\n",
              "       [0.4347486 ],\n",
              "       [0.43416506],\n",
              "       [0.43365157],\n",
              "       [0.433277  ],\n",
              "       [0.43308017],\n",
              "       [0.4330626 ],\n",
              "       [0.43320754],\n",
              "       [0.4335116 ],\n",
              "       [0.43400005],\n",
              "       [0.43466273],\n",
              "       [0.43550962],\n",
              "       [0.43655923],\n",
              "       [0.43789816],\n",
              "       [0.43958026],\n",
              "       [0.44165787],\n",
              "       [0.44402516],\n",
              "       [0.4465724 ],\n",
              "       [0.44926262],\n",
              "       [0.45216963],\n",
              "       [0.455339  ],\n",
              "       [0.45880163],\n",
              "       [0.46242812],\n",
              "       [0.46604308],\n",
              "       [0.4694941 ],\n",
              "       [0.47271684],\n",
              "       [0.47571978],\n",
              "       [0.47857857],\n",
              "       [0.48131132],\n",
              "       [0.48401007],\n",
              "       [0.48668185],\n",
              "       [0.4892806 ],\n",
              "       [0.49173626],\n",
              "       [0.49399933],\n",
              "       [0.49600163],\n",
              "       [0.49770623],\n",
              "       [0.49909005],\n",
              "       [0.50015616],\n",
              "       [0.5009329 ],\n",
              "       [0.5015038 ],\n",
              "       [0.5020032 ],\n",
              "       [0.5024953 ],\n",
              "       [0.5030097 ],\n",
              "       [0.5035167 ],\n",
              "       [0.50398105],\n",
              "       [0.50439095],\n",
              "       [0.504686  ],\n",
              "       [0.5048431 ],\n",
              "       [0.505037  ],\n",
              "       [0.50541306],\n",
              "       [0.5060563 ],\n",
              "       [0.50696224],\n",
              "       [0.5081482 ],\n",
              "       [0.5096142 ],\n",
              "       [0.5112958 ],\n",
              "       [0.5131222 ],\n",
              "       [0.51497054],\n",
              "       [0.516743  ],\n",
              "       [0.5183679 ],\n",
              "       [0.5199747 ],\n",
              "       [0.52202964],\n",
              "       [0.52478755],\n",
              "       [0.5284066 ],\n",
              "       [0.5329103 ],\n",
              "       [0.5382244 ],\n",
              "       [0.5442058 ],\n",
              "       [0.55064166],\n",
              "       [0.55729485],\n",
              "       [0.56407154],\n",
              "       [0.57082117],\n",
              "       [0.57739025],\n",
              "       [0.5835633 ],\n",
              "       [0.58922756],\n",
              "       [0.5943079 ],\n",
              "       [0.5987935 ],\n",
              "       [0.602864  ],\n",
              "       [0.60667   ],\n",
              "       [0.61033386],\n",
              "       [0.61395884],\n",
              "       [0.61754787],\n",
              "       [0.6210507 ],\n",
              "       [0.62441117],\n",
              "       [0.6275755 ],\n",
              "       [0.6304611 ],\n",
              "       [0.6330372 ],\n",
              "       [0.63523674],\n",
              "       [0.6370052 ],\n",
              "       [0.6382658 ],\n",
              "       [0.63867116],\n",
              "       [0.6378869 ],\n",
              "       [0.63590956],\n",
              "       [0.6330459 ],\n",
              "       [0.629701  ],\n",
              "       [0.6262871 ],\n",
              "       [0.6231696 ],\n",
              "       [0.6206037 ],\n",
              "       [0.6187577 ],\n",
              "       [0.6176845 ],\n",
              "       [0.61721194],\n",
              "       [0.6171601 ],\n",
              "       [0.6173332 ],\n",
              "       [0.6175666 ],\n",
              "       [0.6176246 ],\n",
              "       [0.6173432 ],\n",
              "       [0.6165379 ],\n",
              "       [0.615103  ],\n",
              "       [0.61289656],\n",
              "       [0.6097081 ],\n",
              "       [0.6054207 ],\n",
              "       [0.59980655],\n",
              "       [0.5929775 ],\n",
              "       [0.5853723 ],\n",
              "       [0.5775087 ],\n",
              "       [0.5695967 ],\n",
              "       [0.5612878 ],\n",
              "       [0.55235493],\n",
              "       [0.5427015 ],\n",
              "       [0.53225225],\n",
              "       [0.52102834],\n",
              "       [0.5091525 ],\n",
              "       [0.4964465 ],\n",
              "       [0.48279124],\n",
              "       [0.4660611 ],\n",
              "       [0.44506615],\n",
              "       [0.41845077],\n",
              "       [0.3903151 ],\n",
              "       [0.3653395 ],\n",
              "       [0.34413674],\n",
              "       [0.32588923],\n",
              "       [0.30992994],\n",
              "       [0.29622942],\n",
              "       [0.2856882 ],\n",
              "       [0.27858153],\n",
              "       [0.2744042 ],\n",
              "       [0.27270254],\n",
              "       [0.2730471 ],\n",
              "       [0.27507475],\n",
              "       [0.27845198],\n",
              "       [0.28275803],\n",
              "       [0.28753626],\n",
              "       [0.292142  ],\n",
              "       [0.29630643],\n",
              "       [0.2997064 ],\n",
              "       [0.30211523],\n",
              "       [0.30337465],\n",
              "       [0.3033429 ],\n",
              "       [0.30192277],\n",
              "       [0.29881603],\n",
              "       [0.2938477 ],\n",
              "       [0.28662738],\n",
              "       [0.2775693 ],\n",
              "       [0.26792026],\n",
              "       [0.2590251 ],\n",
              "       [0.25188   ],\n",
              "       [0.24656028],\n",
              "       [0.24329835],\n",
              "       [0.24183926],\n",
              "       [0.24165055],\n",
              "       [0.24199322],\n",
              "       [0.24212912],\n",
              "       [0.241473  ],\n",
              "       [0.23953901],\n",
              "       [0.23620695],\n",
              "       [0.23177134],\n",
              "       [0.22668846],\n",
              "       [0.22189903],\n",
              "       [0.21813989],\n",
              "       [0.21608455],\n",
              "       [0.21644899],\n",
              "       [0.21949267],\n",
              "       [0.22472797],\n",
              "       [0.23155546],\n",
              "       [0.23905198],\n",
              "       [0.2466978 ],\n",
              "       [0.25409558],\n",
              "       [0.26131615],\n",
              "       [0.26872596],\n",
              "       [0.2769696 ],\n",
              "       [0.2864993 ],\n",
              "       [0.29658172],\n",
              "       [0.3062408 ],\n",
              "       [0.31452963],\n",
              "       [0.32106796],\n",
              "       [0.3258232 ],\n",
              "       [0.3290297 ],\n",
              "       [0.3309969 ],\n",
              "       [0.3320682 ],\n",
              "       [0.33257198],\n",
              "       [0.33297718],\n",
              "       [0.33387718],\n",
              "       [0.33568463],\n",
              "       [0.3387341 ],\n",
              "       [0.34340617],\n",
              "       [0.34962443],\n",
              "       [0.35693255],\n",
              "       [0.36512667],\n",
              "       [0.37403256],\n",
              "       [0.3834876 ],\n",
              "       [0.39322707],\n",
              "       [0.40299448],\n",
              "       [0.41246438],\n",
              "       [0.42135406],\n",
              "       [0.42952085],\n",
              "       [0.43688053],\n",
              "       [0.4434213 ],\n",
              "       [0.44905365],\n",
              "       [0.45370072],\n",
              "       [0.4574315 ],\n",
              "       [0.46032056],\n",
              "       [0.46257865],\n",
              "       [0.46431077],\n",
              "       [0.46567178],\n",
              "       [0.46680367],\n",
              "       [0.46788222],\n",
              "       [0.46896094],\n",
              "       [0.4699637 ],\n",
              "       [0.47084516],\n",
              "       [0.47167945],\n",
              "       [0.47261328],\n",
              "       [0.47390777],\n",
              "       [0.4757378 ],\n",
              "       [0.4781373 ],\n",
              "       [0.48102343],\n",
              "       [0.48431578],\n",
              "       [0.48788399],\n",
              "       [0.4919194 ],\n",
              "       [0.4964822 ],\n",
              "       [0.5012689 ],\n",
              "       [0.5061873 ],\n",
              "       [0.511099  ],\n",
              "       [0.5159436 ],\n",
              "       [0.52053875],\n",
              "       [0.5245878 ],\n",
              "       [0.52789223],\n",
              "       [0.53024113],\n",
              "       [0.5309923 ],\n",
              "       [0.5297533 ],\n",
              "       [0.5265504 ],\n",
              "       [0.5215281 ],\n",
              "       [0.51491463],\n",
              "       [0.50697774],\n",
              "       [0.49798423],\n",
              "       [0.48820886],\n",
              "       [0.47777858],\n",
              "       [0.46688598],\n",
              "       [0.4548904 ],\n",
              "       [0.4417983 ],\n",
              "       [0.4279729 ],\n",
              "       [0.41382405],\n",
              "       [0.39960665],\n",
              "       [0.38587528],\n",
              "       [0.37314895],\n",
              "       [0.36182982],\n",
              "       [0.35222864],\n",
              "       [0.34445304],\n",
              "       [0.33854717],\n",
              "       [0.33452585],\n",
              "       [0.3325467 ],\n",
              "       [0.3327598 ],\n",
              "       [0.335239  ],\n",
              "       [0.33969563],\n",
              "       [0.34544563],\n",
              "       [0.35186717],\n",
              "       [0.35837257],\n",
              "       [0.3645545 ],\n",
              "       [0.37016606],\n",
              "       [0.37506235],\n",
              "       [0.37917823],\n",
              "       [0.3824846 ],\n",
              "       [0.3850148 ],\n",
              "       [0.38694757],\n",
              "       [0.38841677],\n",
              "       [0.38992307],\n",
              "       [0.39185145],\n",
              "       [0.39460862],\n",
              "       [0.3987623 ],\n",
              "       [0.4048543 ],\n",
              "       [0.4130234 ],\n",
              "       [0.42299652],\n",
              "       [0.43436074],\n",
              "       [0.44672665],\n",
              "       [0.45971417],\n",
              "       [0.4730022 ],\n",
              "       [0.4862643 ],\n",
              "       [0.49918878],\n",
              "       [0.5114535 ],\n",
              "       [0.5226013 ],\n",
              "       [0.5323384 ],\n",
              "       [0.5404072 ],\n",
              "       [0.5464721 ],\n",
              "       [0.5505519 ],\n",
              "       [0.55291116],\n",
              "       [0.5539228 ],\n",
              "       [0.5538899 ],\n",
              "       [0.5532297 ],\n",
              "       [0.55229414],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [       nan],\n",
              "       [0.51061237],\n",
              "       [0.51452124],\n",
              "       [0.5182937 ],\n",
              "       [0.52196217],\n",
              "       [0.5254296 ],\n",
              "       [0.52852255],\n",
              "       [0.531124  ],\n",
              "       [0.5331517 ],\n",
              "       [0.534531  ],\n",
              "       [0.5352589 ],\n",
              "       [0.5352881 ],\n",
              "       [0.53468627],\n",
              "       [0.53361934],\n",
              "       [0.53239036],\n",
              "       [0.53147364],\n",
              "       [0.5312476 ],\n",
              "       [0.5318678 ],\n",
              "       [0.5332167 ],\n",
              "       [0.53518355],\n",
              "       [0.537748  ],\n",
              "       [0.5407003 ],\n",
              "       [0.5437174 ],\n",
              "       [0.54656684],\n",
              "       [0.54899573],\n",
              "       [0.550755  ],\n",
              "       [0.551677  ],\n",
              "       [0.5516089 ],\n",
              "       [0.55056924],\n",
              "       [0.54856455],\n",
              "       [0.5456327 ],\n",
              "       [0.54185086],\n",
              "       [0.5371975 ],\n",
              "       [0.5316708 ],\n",
              "       [0.52533656],\n",
              "       [0.5183526 ],\n",
              "       [0.51098037],\n",
              "       [0.50350785],\n",
              "       [0.4961623 ],\n",
              "       [0.489124  ],\n",
              "       [0.48248833],\n",
              "       [0.4763109 ],\n",
              "       [0.47075176],\n",
              "       [0.46585968],\n",
              "       [0.4615734 ],\n",
              "       [0.45790166],\n",
              "       [0.45486444],\n",
              "       [0.45236516],\n",
              "       [0.4502753 ],\n",
              "       [0.44860867],\n",
              "       [0.4473004 ],\n",
              "       [0.44623494],\n",
              "       [0.44529513],\n",
              "       [0.44436544],\n",
              "       [0.4434147 ],\n",
              "       [0.4423917 ],\n",
              "       [0.44125032],\n",
              "       [0.4401241 ],\n",
              "       [0.43916994],\n",
              "       [0.43871424],\n",
              "       [0.43891957],\n",
              "       [0.43986648],\n",
              "       [0.44166315],\n",
              "       [0.44436333],\n",
              "       [0.44807464],\n",
              "       [0.4528483 ],\n",
              "       [0.45887488],\n",
              "       [0.4662267 ],\n",
              "       [0.47482008],\n",
              "       [0.48441747],\n",
              "       [0.4946925 ],\n",
              "       [0.505278  ],\n",
              "       [0.5157615 ],\n",
              "       [0.525711  ],\n",
              "       [0.5348418 ],\n",
              "       [0.54296577],\n",
              "       [0.5500065 ],\n",
              "       [0.55593634],\n",
              "       [0.56085193],\n",
              "       [0.5648667 ],\n",
              "       [0.5680957 ],\n",
              "       [0.57050157],\n",
              "       [0.5721891 ],\n",
              "       [0.5732503 ],\n",
              "       [0.57381964],\n",
              "       [0.5740236 ],\n",
              "       [0.57391703],\n",
              "       [0.5735394 ],\n",
              "       [0.5729513 ],\n",
              "       [0.57229567],\n",
              "       [0.57160425],\n",
              "       [0.5709481 ],\n",
              "       [0.570423  ],\n",
              "       [0.5701127 ],\n",
              "       [0.570063  ],\n",
              "       [0.57021093],\n",
              "       [0.57053256],\n",
              "       [0.5714927 ],\n",
              "       [0.57330656],\n",
              "       [0.5762893 ],\n",
              "       [0.5806079 ],\n",
              "       [0.5865321 ],\n",
              "       [0.59416527],\n",
              "       [0.60355556],\n",
              "       [0.61454034],\n",
              "       [0.6268797 ],\n",
              "       [0.6404711 ],\n",
              "       [0.655373  ],\n",
              "       [0.67141545],\n",
              "       [0.68809295],\n",
              "       [0.7047633 ],\n",
              "       [0.7206521 ],\n",
              "       [0.73532236],\n",
              "       [0.74852943],\n",
              "       [0.7601731 ],\n",
              "       [0.7701448 ],\n",
              "       [0.77830863],\n",
              "       [0.78476214],\n",
              "       [0.7895986 ],\n",
              "       [0.7928268 ],\n",
              "       [0.7945769 ],\n",
              "       [0.7950809 ],\n",
              "       [0.79470813],\n",
              "       [0.7939968 ],\n",
              "       [0.7935413 ],\n",
              "       [0.79376733],\n",
              "       [0.7949418 ],\n",
              "       [0.7969221 ],\n",
              "       [0.79939604],\n",
              "       [0.8019986 ],\n",
              "       [0.8045651 ],\n",
              "       [0.80676436],\n",
              "       [0.80836797],\n",
              "       [0.80932665],\n",
              "       [0.8096881 ],\n",
              "       [0.8095511 ],\n",
              "       [0.8089671 ],\n",
              "       [0.80779386],\n",
              "       [0.80608153],\n",
              "       [0.80379117],\n",
              "       [0.8009521 ],\n",
              "       [0.7979177 ],\n",
              "       [0.79489744],\n",
              "       [0.791998  ],\n",
              "       [0.78927743],\n",
              "       [0.7868681 ],\n",
              "       [0.7847793 ],\n",
              "       [0.78301364],\n",
              "       [0.7814572 ],\n",
              "       [0.7799912 ],\n",
              "       [0.7785276 ],\n",
              "       [0.7769836 ],\n",
              "       [0.7756203 ],\n",
              "       [0.7745491 ],\n",
              "       [0.7738105 ],\n",
              "       [0.77332723],\n",
              "       [0.77296257],\n",
              "       [0.77259195],\n",
              "       [0.7721962 ],\n",
              "       [0.771793  ],\n",
              "       [0.77134323],\n",
              "       [0.7708094 ],\n",
              "       [0.77020544],\n",
              "       [0.769665  ],\n",
              "       [0.7693896 ],\n",
              "       [0.769572  ],\n",
              "       [0.7705548 ],\n",
              "       [0.7725266 ],\n",
              "       [0.7756436 ],\n",
              "       [0.7799256 ],\n",
              "       [0.78525424],\n",
              "       [0.7915951 ],\n",
              "       [0.798707  ],\n",
              "       [0.8061552 ],\n",
              "       [0.81351244],\n",
              "       [0.8205724 ]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#define the scale\n",
        "scaler = scaler.scale_"
      ],
      "metadata": {
        "id": "rVz0kXa5Qkq-"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#return the value to the original with scale factor\n",
        "scale_factor = 1/scaler[0]\n",
        "y_predicted = y_predicted * scale_factor\n",
        "y_test = y_test * scale_factor"
      ],
      "metadata": {
        "id": "UtA0o3cIQoxC"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#visualize the comparison between original closing price and the prediction\n",
        "plt.figure(figsize=(12,6))\n",
        "plt.plot(y_test, 'b', label = 'Original Price')\n",
        "plt.plot(y_predicted, 'r', label = 'Predicted Price')\n",
        "plt.xlabel('Time')\n",
        "plt.ylabel('Price')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 420
        },
        "id": "GWbhbahARe2m",
        "outputId": "c8905170-c343-4679-ee70-5d9d7f320ef6"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "From the graph above, there is a slight differentation between the original and the prediction from model. But if we analyze the line, there are some point where the original and the prediction have same price. "
      ],
      "metadata": {
        "id": "tpQ7c4f8Uxbz"
      }
    }
  ]
}
